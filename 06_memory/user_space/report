/bin/rm -rf *.o a.out user-space-memory
gcc user_space_memory.c -o user-space-memory -I. -std=c99 -DCALL_ALLOCATOR=1 -DCALL_FREE=1
----------------------------------------------------------------
|size                |allocate took       |free took           | malloc free cycles=1000
----------------------------------------------------------------
1                   		1,109		0,749 <<<< alloc of 1 byte is SLOW!
2                   		0,639		0,595
4                   		0,62		0,648
8                   		0,632		0,582
16                  		0,596		0,634
32                  		0,734		0,631
64                  		0,642		0,607
128                 		0,618		0,618
256                 		0,659		0,635
512                 		0,704		0,58
1024                		0,684		0,667
2048                		2,129		0,71
4096                		0,713		0,651 <<<< alloc slow down after 2K or 4K
8192                		1,969		0,57
16384               		1,921		0,646
32768               		1,925		0,639
65536               		1,97		0,611
131072              		4,617		5,072 <<<< alloc && free slow down after 128K
262144              		3,678		2,873
524288              		3,396		2,987
1048576             		3,325		3,317
2097152             		3,743		4,235 <<<< free start taking more time then alloc
4194304             		3,836		3,991
8388608             		3,808		3,995
16777216            		3,69		4,114
33554432            		3,624		4,062
67108864            		3,68		4,229
134217728           		3,773		4,5
268435456           		3,863		5,336
536870912           		4,008		6,694
1073741824          		4,245		9,708
2147483648          		4,149		9,481
4294967296          		3,987		9,487
8589934592          		4,092		9,631 free is 2 times slower then allocation on big chunks.
                                                      Freeing is slowing down allocation!

/bin/rm -rf *.o a.out user-space-memory
gcc user_space_memory.c -o user-space-memory -I. -std=c99 -DCALL_ALLOCATOR=1 -DCALL_FREE=0
----------------------------------------------------------------
|size                |allocate took       |free took           | malloc no free cycles=1000
----------------------------------------------------------------
1                   		1,167		0,63  <<<< alloc of 1 byte is SLOW!
2                   		0,641		0,646
4                   		0,634		0,647
8                   		0,618		0,568
16                  		0,666		0,607
32                  		0,613		0,643
64                  		0,737		0,584
128                 		0,621		0,618
256                 		0,693		0,613
512                 		0,651		0,588
1024                		0,663		0,684
2048                		2,123		0,602 <<< alloc slow down after 2K
4096                		1,998		0,596
8192                		2,088		0,649
16384               		1,963		0,606
32768               		1,922		0,606
65536               		3,388		0,598
131072              		2,009		0,633
262144              		4,472		0,633 <<< next alloc slow down
524288              		4,414		0,593
1048576             		3,074		0,631
2097152             		3,187		0,624
4194304             		3,243		0,642
8388608             		3,186		0,585
16777216            		3,1		0,59
33554432            		3,226		0,593
67108864            		3,165		0,693
134217728           		3,147		0,6
268435456           		3,182		0,598
536870912           		3,44		0,604
1073741824          		3,516		0,61
2147483648          		3,525		0,614
4294967296          		3,576		0,627
8589934592          		3,594		0,628 without freeing allocation is faster!


/bin/rm -rf *.o a.out user-space-memory
gcc user_space_memory.c -o user-space-memory -I. -std=c99 -DCALL_ALLOCATOR=2 -DCALL_FREE=1
----------------------------------------------------------------
|size                |allocate took       |free took           | calloc free cycles=1000
----------------------------------------------------------------
1                   		1,186		0,747 <<< alloc of 1 byte is SLOW!
2                   		0,637		0,586
4                   		0,67		0,672
8                   		0,834		0,584
16                  		0,699		0,65
32                  		0,671		0,608
64                  		0,661		0,601
128                 		0,753		0,629
256                 		0,741		0,605
512                 		0,659		0,579
1024                		0,733		0,674
2048                		2,255		0,781 <<<< alloc slow down after 2K or 4K
4096                		0,746		0,611
8192                		2,215		0,634
16384               		3,6		0,678
32768               		6,458		0,648
65536               		13,619		0,645 <<<< alloc of 65 is super slow!!!
131072              		4,688		5,057 <<<< free start slowing down
262144              		3,805		2,907
524288              		3,359		2,937
1048576             		3,529		3,202
2097152             		3,754		4,116 <<<< free start taking more time then alloc
4194304             		3,722		4,017
8388608             		3,713		4,027
16777216            		3,797		4,04
33554432            		3,696		4,113
67108864            		3,746		4,246
134217728           		3,785		4,597
268435456           		3,821		5,316
536870912           		3,943		6,65
1073741824          		4,19		9,696
2147483648          		4,113		9,513
4294967296          		4,014		9,515
8589934592          		4,08		9,633 free is 2 times slower then allocation on big chunks.
                                                      Freeing is slowing down allocation!
/bin/rm -rf *.o a.out user-space-memory
gcc user_space_memory.c -o user-space-memory -I. -std=c99 -DCALL_ALLOCATOR=2 -DCALL_FREE=0
----------------------------------------------------------------
|size                |allocate took       |free took           | calloc no free cycles=1000
----------------------------------------------------------------
1                   		1,192		0,591 <<< alloc of 1 byte is SLOW!
2                   		0,665		0,606
4                   		0,62		0,626
8                   		0,631		0,578
16                  		0,643		0,62
32                  		0,648		0,61
64                  		0,643		0,586
128                 		0,709		0,588
256                 		0,689		0,634
512                 		0,708		0,599
1024                		0,713		0,614
2048                		2,207		0,62  <<<< alloc slow down after 2K
4096                		2,134		0,604
8192                		3,372		0,566
16384               		6,127		0,625
32768               		12,57		0,596
65536               		24,7		0,598 <<< alloc 65k is slow!!!
131072              		45,484		0,617 <<< alloc 128k is super slow!!!
262144              		4,697		0,634 <<< alloc slow down
524288              		3,226		0,573
1048576             		3,15		0,598
2097152             		3,189		0,627
4194304             		4,376		0,605
8388608             		3,142		0,627
16777216            		3,127		0,621
33554432            		3,162		0,645
67108864            		3,179		0,605
134217728           		3,273		0,606
268435456           		3,216		0,719
536870912           		3,513		0,583
1073741824          		3,56		0,59
2147483648          		3,588		0,621
4294967296          		3,55		0,62
8589934592          		3,564		0,611 without freeing allocation is faster!
/bin/rm -rf *.o a.out user-space-memory
gcc user_space_memory.c -o user-space-memory -I. -std=c99 -DCALL_ALLOCATOR=3 -DCALL_FREE=0
----------------------------------------------------------------
|size                |allocate took       |free took           | alloca cycles=1000
----------------------------------------------------------------
1                   		1,122		0,659 <<< alloc of 1 byte is SLOW!
2                   		0,68		0,606
4                   		0,617		0,631
8                   		0,642		0,584
16                  		0,612		0,576
32                  		0,665		0,649
64                  		0,667		0,593
128                 		0,61		0,638
256                 		0,638		0,629
512                 		0,638		0,606
1024                		0,591		0,578
2048                		0,619		0,613
4096                		0,668		0,611
8192                		1,783		0,608 <<<< alloc slow down after 8K
16384               		3,392		0,668      2 times each time buff is doubled
32768               		5,709		0,615
65536               		12,253		0,598
131072              		23,651		0,605
262144              		49,758		0,625
524288              		98,409		0,619
1048576             		211,218		0,638
2097152             		398,471		0,581
4194304             		844,068		0,615 buffer size is limited by the stack size
